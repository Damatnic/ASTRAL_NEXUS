name: Deploy to Production

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Security and Quality Checks
  security-check:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run security audit
        run: pnpm audit --audit-level moderate
        
      - name: Check for hardcoded secrets
        run: |
          ! grep -r "client.*secret.*:" apps/web/src/ || (echo "Hardcoded secrets found!" && exit 1)
          ! grep -r "password.*:" apps/web/src/ || (echo "Hardcoded passwords found!" && exit 1)

  # Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: security-check
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: astralcore_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Generate Prisma client
        run: pnpm --filter @astralcore/database generate
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/astralcore_test
          
      - name: Run database migrations
        run: pnpm --filter @astralcore/database db:push
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/astralcore_test
          
      - name: Run type checking
        run: pnpm turbo typecheck
        
      - name: Run linting
        run: pnpm turbo lint
        
      - name: Build applications
        run: pnpm turbo build
        env:
          SKIP_TYPE_CHECK: "true"
          
      - name: Run unit tests
        run: pnpm turbo test
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/astralcore_test
          REDIS_URL: redis://localhost:6379
          NEXTAUTH_SECRET: test_secret_for_ci
          
      - name: Run crisis-critical tests
        run: pnpm --filter astral-core-web test:crisis
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/astralcore_test
          REDIS_URL: redis://localhost:6379
          
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./apps/web/coverage/lcov.info
          fail_ci_if_error: true
          
  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build for performance testing
        run: pnpm turbo build
        
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.13.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Deploy to Vercel
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [security-check, build-and-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
        
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          
      - name: Run post-deployment health check
        run: |
          sleep 30
          curl -f ${{ steps.deploy.outputs.url }}/api/health || exit 1
          
      - name: Notify Slack on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'üöÄ ASTRAL CORE V2 deployed successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '‚ùå ASTRAL CORE V2 deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Database Migration (Production)
  migrate-production:
    name: Production Database Migration
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    environment:
      name: production-db
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run production migrations
        run: pnpm --filter @astralcore/database db:migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          
      - name: Verify migration success
        run: |
          pnpm --filter @astralcore/database prisma db status
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}